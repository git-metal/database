------------------------------------------------------------------------------
###安装mysql
------------------------------------------------------------------------------
1、查看系统中是否已安装 MySQL 服务
    rpm -qa | grep mysql
    yum list installed | grep mysql

2、删除 MySQL 及其依赖的包
    yum -y remove mysql-libs.x86_64

3、下载 mysql57-community-release-el7-8.noarch.rpm 的 YUM 源
    wget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm

4、安装mysql57-community-release-el7-8.noarch.rpm
    rpm -ivh mysql57-community-release-el7-8.noarch.rpm
    安装完成后在/etc/yum.repos.d会有两个文件
        mysql-community.repo
        mysql-community-source.repo

5、安装mysql，一路确定完成
    yum install mysql-server

6、查看版本
    mysqladmin --version

------------------------------------------------------------------------------
###使用mysql
------------------------------------------------------------------------------

默认配置文件路径: 
    配置文件: /etc/my.cnf
    日志文件: /var/log/mysqld.log
    服务启动脚本:  /usr/lib/systemd/system/mysqld.service
    socket文件: /var/run/mysqld/mysqld.pid
    数据库文件: /var/lib/mysql
    默认端口号: 3306 TCP     netstat -anp | grep 3306

启动、停止：
    service mysqld start|stop|restart|status
    systemctl start|stop|status|restart mysqld

连接:
    mysql -u root -p123
    mysql -h localhost -u root -p123
    mysql -h 192.168.0.201 -P 3306 -u root -p123

基本配置：
    获取初始密码:启动后会在/var/log/mysqld.log中自动生成一个随机密码（grep "password" /var/log/mysqld.log）
    修改初始密码:
        #1
        alter user 'root'@'localhost' identified by 'Huawei@123';
        flush privileges;
        #2
        SET PASSWORD = PASSWORD('Huawei@123');
        ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;
        flush privileges;
        #3 修改密码:(5.7中没有password字段，用的是authentication_string字段)
        update mysql.user set authentication_string=password('Huawei12#$') where user='root';
        flush privileges;
    设置用户root可以在任意IP下访问:
        grant all privileges on *.* to root@"%" identified by "new password";
    设置用户 root 可以在本地被访问：
        grant all privileges on *.* to root@"localhost" identified by "new password";
        grant all privileges on *.* to root@"%" identified by "Huawei@123";
    用户管理:(必须执行flush privileges;)
        创建用户：
            命令: CREATE USER 'username'@'host' IDENTIFIED BY 'password'; 
            CREATE USER 'test'@'%' IDENTIFIED BY 'Huawei@123'; 
                host:指定该用户在哪个主机上可以登陆,"localhost"是指该用户只能在本地登录;将"localhost"改为"%"，表示在任何一台电脑上都可以登录
        授权：
            命令: GRANT privileges ON databasename.tablename TO 'username'@'host'
            GRANT all privileges ON *.* TO 'test'@'%' 
                privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等

        创建用户同时授权:
            grant all privileges on *.* to test@'%' identified by "Huawei@123";

        撤销用户权限:
            命令: REVOKE privilege ON databasename.tablename FROM 'username'@'host';

        查看用户授权:
            show grants for username@host;
            SHOW GRANTS for 'root'@'%';

        删除用户:
            DROP USER 'username'@'host';

        查看用户:
            select user,host from mysql.user;

        设置与更改用户密码:
            命令: SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');


    设置字符集为UTF-8:
        vim /etc/my.cnf
        在 [mysqld] 前添加如下代码：
            [client]
            default-character-set=utf8
        在 [mysqld] 后添加如下代码：
            character_set_server=utf8
        登录mysql查看字符集：
            show variables like '%character%';

创建数据库:
    create database <database>;
    mysqladmin -u root -p create <database>
    CREATE DATABASE dbname DEFAULT CHARSET utf8 COLLATE utf8_general_ci #排序时根据utf8变码格式来排序
    show create database db_name    #查看db生成的DDL
删除数据库:
    drop database <数据库名>;
    mysqladmin -u root -p drop <database>

创建表:
    CREATE TABLE table_name (column_name column_type);
    create table user(
        name VARCHAR(100),
        description VARCHAR(100),
        primary key (name)
    )ENGINE=InnoDB DEFAULT CHARSET=utf8;
    
    desc tabl_name;                 #显示表结构，字段类型，主键，是否为空等属性，但不显示外键
    show columns from tbale;        
    show create table table_name;   #查看表生成的DDL


删除表：
    drop table <table_name>;

插入数据:
    insert into <table_name> ( field1, field2,...fieldN ) values ( value1, value2,...valueN );
    insert into user values ("sz", "test name");

修改表字段：
    alter 


mysql各种utf8编码格式: 
    utf8_bin: 将字符串中的每一个字符用二进制数据存储，区分大小写
    utf8_general_ci: 不区分大小写，ci为case insensitive的缩写，即大小写不敏感
    utf8_general_cs: 区分大小写，cs为case sensitive的缩写，即大小写敏感
    用法：
        COLLATE:指定数据集如何排序
        COLLATE utf8_bin


#数据库操作:
    show databases;
    user database_name;
    show tables;
    desc table_name;
    show columns from table_name;
    show index from table_name;         #显示数据表的详细索引信息
    show table status from db_name;     #输出Mysql数据库管理系统的性能及统计信息
    mysqldump -u username -ppassword dbname > dbname.sql                  #导出整个数据库（包括数据库中的数据）
    mysqldump -u username -ppassword dbname tablename > tablename.sql     #导出数据库中的数据表（包括数据）
    mysqldump -u username -ppassword -d dbname > dbname.sql               #导出数据库结构
    mysqldump -u username -ppassword -d dbname tablename > tablename.sql  #导出数据库中数据表的表结构
    mysql -u username -ppassword dbname < test.sql                        #导入
    #导出导入所有数据库
    mysqldump -u username -ppassword -S /usr/lib/mysql/mysql.sock --all-databases > test.sql
    mysqldump -u username -ppassword -S /usr/lib/mysql/mysql.sock --all-databases | gzip  test.sql.gz
    mysql -uusername ppassword -S /usr/lib/mysql/mysql.sock  < test.sql
    #导出导入单个数据库

    select CONNECTION_ID()；             #查找当前的连接ID
    show create table table_name;        #
    show create database database_name;

    #SELECT语句
        SELECT 
            column_1, column_2, ...
        FROM
            table_1
        [INNER | LEFT |RIGHT] JOIN table_2 ON conditions
        WHERE
            conditions
        GROUP BY column_1
        HAVING group_conditions
        ORDER BY column1 [ASC|DESC], column2 [ASC|DESC],...
        LIMIT length
        offset length;

        SELECT lastname, firstname, jobtitle FROM employees;
        SELECT lastname, firstname, jobtitle FROM employees limit 10 offset 5;

    #SELECT DISTINCT语句
        SELECT DISTINCT
            column_1, column_2, ...
        FROM
            table_name
        WHERE
            where_conditions;

        SELECT DISTINCT lastname FROM employees ORDER BY lastname;
        (!) 如果列具有NULL值，并且对该列使用DISTINCT子句，MySQL将保留一个NULL值，并删除其它的NULL值.

    #MySQL DISTINCT和聚合函数
        SELECT 
            COUNT(DISTINCT state)
        FROM
            customers
        WHERE
            country = 'USA';

    #like
        通配符:
            %:匹配任何字符串的零个或多个字符
            _:匹配任何单个字符
        转义符:
            默认转义字符: \
            自定义转义字符(ESCAPE): SELECT productCode, productName FROM products WHERE productCode LIKE '%$_20%' ESCAPE '$';

    #order by
        ORDER BY column1 [ASC|DESC], column2 [ASC|DESC],... （默认升序排序）
        #按表达式排序示例
            SELECT
             ordernumber,
             orderlinenumber,
             quantityOrdered * priceEach
            FROM
             orderdetails
            ORDER BY
             ordernumber,
             orderLineNumber,
             quantityOrdered * priceEach;
            SELECT
             ordernumber,
             orderlinenumber,
             quantityOrdered * priceEach AS subtotal
            FROM
             orderdetails
            ORDER BY
             ordernumber,
             orderLineNumber,
             subtotal;
        #自定义排序顺序：FIELD()
            SELECT 
                orderNumber, status
            FROM
                orders
            ORDER BY FIELD(status,
                    'In Process',
                    'On Hold',
                    'Cancelled',
                    'Resolved',
                    'Disputed',
                    'Shipped');

#表连接
    inner join:
        select column_list from t1 INNER JOIN t2 ON join_condition1 INNER JOIN t3 ON join_condition2
    left oin: 
        select t1.c1, t1.c2, t2.c1, t2.c2 from tc left join t2 on t1.c1 = t2.c1;
        select t1.c1, t1.c2, t2.c1, t2.c2 from tc left join t2 using(c1);
    cross join: 从连接的表返回行的笛卡儿乘积
        select * from t1 cross join t2 where t1.id = t2.id

#表锁定
    LOCK TABLES table_name [READ | WRITE]
    UNLOCK TABLES;

#MySQL序列
    AUTO_INCREMENT:
        1. 每个表只有一个AUTO_INCREMENT列，其数据类型通常为整数
        2. 必须对AUTO_INCREMENT列进行索引，它可以是PRIMARY KEY或UNIQUE索引
        3. AUTO_INCREMENT列必须具有NOT NULL约束。当您为列设置AUTO_INCREMENT属性时，MySQL会自动将NOT NULL约束隐式添加到列中

#UNIQUE
    CREATE UNIQUE INDEX index_name ON table_name(index_column_1,index_column_2,...);
    ALTER TABLE table_name ADD CONSTRAINT constraint_name UNIQUE KEY(column_1,column_2,...);
    ALTER TABLE users ADD UNIQUE INDEX username_unique (username ASC) ;
    ALTER TABLE users ADD UNIQUE INDEX  email_unique (email ASC) ;

#外键
    #create table语句中
        CONSTRAINT constraint_name
        FOREIGN KEY foreign_key_name (columns)
        REFERENCES parent_table(columns)
        ON DELETE action
        ON UPDATE action
    #修改表
        ALTER table_name
        ADD CONSTRAINT constraint_name
        FOREIGN KEY foreign_key_name(columns)
        REFERENCES parent_table(columns)
        ON DELETE action
        ON UPDATE action;
    #删除外键
        ALTER TABLE table_name DROP FOREIGN KEY constraint_name;
    #禁用|启动外键 （导入数据时有用）
        SET foreign_key_checks = 0  #禁用
        SET foreign_key_checks = 0  #启用
